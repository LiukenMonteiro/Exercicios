version: '3'
services:
  frontend:
    build: frontend/  # Especificamos o contexto, ou seja, a pasta onde está o Dockerfile.
    restart: always #reinicialização sempre
    ports: #porta do docker ligada a porta da minha máquina
      - 3000:3000
    depends_on: #dependências de inicialização
      - backend
    volumes: #aonde ficarão guardados os volumes no minha máquina
      - ./logs:/var/log/frontend
    networks:
      - rede-virtual-1
  backend:
    build: backend/  # Mesmo caso aqui.
    restart: always #reinicialização sempre
    ports: #porta do docker ligada a porta da minha máquina
      - 3001:3001 
    environment: #chave variável de ambiente
      - DB_HOST=database 
    depends_on: #dependências de inicialização
      - database 
    networks:
      - rede-virtual-1
      - rede-virtual-2
  database: 
    image: betrybe/docker-compose-example-database:v1 # Especificamos a Imagem Docker diretamente.
    restart: always #reinicialização sempre
    volumes: #nome do disco virtual : caminho no container
      - dados-do-banco:/data/db
    networks:
      - rede-virtual-2
  
volumes: #criação de volumes
  dados-do-banco:

networks:
  rede-virtual-1
  rede-virtual-2



#1️⃣ image: especifica uma imagem Docker pronta, seja local ou a ser baixada no Docker Hub;

#2️⃣ build: especifica a pasta contendo um arquivo Dockerfile a partir do qual o Compose vai executar o comando docker build automaticamente.


#docker-compose ps = mostra o status dos serviços.
#docker-compose up -d = sobe os serviços.
#docker-compose up -d --build = rescontroi imagens.
#docker-compose down = derruba os serviços.
#docker-compose logs = para ver logs da execução.
#docker-compose logs -f = para ver logs da execução em tempo real.
#docker-compose logs --tail 5 = para ver logs da execuçã, limitando número de linhas à 5.